# syslog Input Plugin

The `in_syslog` Input plugin enables Fluentd to retrieve records via the syslog protocol on UDP.

### Example Configuration

`in_syslog` is included in Fluentd's core. No additional installation process is required.

    :::text
    <source>
      type syslog
      port 5140
      bind 0.0.0.0
      tag system
    </source>

NOTE: Please see the <a href="config-file">Config File</a> article for the basic structure and syntax of the configuration file.

#### Example Usage

The retrieved data is organized as follows. Fluentd's tag is generated by the `tag` parameter (tag prefix), [facility level](http://en.wikipedia.org/wiki/Syslog#Facility_Levels), and [priority](http://en.wikipedia.org/wiki/Syslog#Severity_levels). The record is parsed by the regexp [here](https://github.com/fluent/fluentd/blob/master/lib/fluent/plugin/in_syslog.rb#L25).

    :::text
    tag = "#{@tag}.#{facility}.#{priority}"
    
    record = {
      "pri": "0",
      "time": 1353436518,
      "host": "host",
      "ident": "ident",
      "pid": "12345",
      "message": "text"
    }

### Parameters

#### type (required)
The value must be `syslog`.

#### port
The port to listen to. Default Value = 5140

#### bind
The bind address to listen to. Default Value = 0.0.0.0 (all addresses)

#### tag (required)
The prefix of the tag. The tag itself is generated by the tag prefix, [facility level](http://en.wikipedia.org/wiki/Syslog#Facility_Levels), and [priority](http://en.wikipedia.org/wiki/Syslog#Severity_levels).

#### types (optional, v.0.10.42 and up)

By default, every parsed field has type `string`, but one can specify other types. This is convenient when you want to filter particular fields by numerical comparison or store data with sensible type information.

The syntax is

    :::text
    types <field_name_1>:<type_name_1>,<field_name_2>:<type_name_2>,...

e.g.,

    :::text
    types user_id:integer,paid:bool,paid_usd_amount:float

i.e., "," is used to delimit field-type pairs, and ":" is used to separate a field name with its intended type.

Untyped fields remain as strings.

Here is the list of supported types:

* string
* bool
* integer ("int" would NOT work!)
* float
* time
* array

For `time` and `array` types, there is an optional third field after type name. For the "time" type, you can specify a time format like you would in `time_format`. For the "array" type, the third field specifies the delimiter (the default is ","). For example, if a field called "item_ids" with the value "3,4,5", `types item_ids:array` parses it as ["3", "4", "5"]. Alternatively, if the value is "Adam|Alice|Bob", `types item_ids:array:|` parses it as ["Adam", "Alice", "Bob"].