# tail Input Plugin

The `in_tail` Input plugin allows Fluentd to read events from the tail of text files. Its behavior is similar to the `tail -F` command.

### Example Configuration

`in_tail` is included in Fluentd's core. No additional installation process is required.

    :::text
    <source>
      type tail
      path /var/log/httpd-access.log
      pos_file /var/log/td-agent/httpd-access.log.pos
      tag apache.access
      format apache2
    </source>

NOTE: Please see the <a href="config-file">Config File</a> article for the basic structure and syntax of the configuration file.

### How it Works

* When Fluentd is first configured with `in_tail`, it will start reading from the **tail** of that log, not the beggining.
* Once the log is rotated, Fluentd starts reading the new file from the beggining. It keeps track of the current inode number.
* If `td-agent` restarts, it starts reading from the last position td-agent read before the restart. This position is recorded in the position file specified by the pos_file parameter.

### Parameters

#### type (required)
The value must be `tail`.

#### tag (required)
The tag of the event.

`*` can be specified. `*` is replaced by actual file path which is replaced `/` with `.`.
If you use following configuration

    :::text
    path /path/to/file
    tag foo.*

in_tail emits the event to 'foo.path.to.file' tag.

#### path (required)
The paths to read. Multiple paths can be specified, separated by ‘,’.

`*` and strftime format can be included to add/remove watch file dynamically. At interval of `refresh_interval`, Fluentd refreshes the list of watch file.

    :::text
    path /path/to/%Y/%m/%d/*

If the date is 20140401, Fluentd starts to watch the files in /path/to/2014/04/01 directory.

NOTE: You should not use '*' with log rotation because it may cause the log duplication. In such case, you should separate in_tail plugin configuration.

#### refresh_interval
The interval of refreshing the list of watch file. Default is 60 seconds.

#### read_from_head
Start to read the logs from the head of file, not bottom. The default is `false`.

If you want to tail all contents with `*` or strftime dynamic path, set this parameter to `true`.
Instead, you should guarantee that log rotation will not occur in `*` directory.

#### format (required)
The format of the log. It is the name of a template or regexp surrounded by ‘/’.

The regexp must have at least one named capture (?&lt;NAME&gt;PATTERN). If the regexp has a capture named ‘time’, it is used as the time of the event. You can specify the time format using the time_format parameter.

The following templates are supported:

* regexp

The regexp for the format parameter can be specified. [Fluentular](http://fluentular.herokuapp.com/) is a great website to test your regexp for Fluentd configuration.

* `apache2`

Reads apache’s log file for the following fields: host, user, time, method, path, code, size, referer and agent. This template is analogous to the following configuration:

    :::text
    format /^(?<host>[^ ]*) [^ ]* (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^ ]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$/
    time_format %d/%b/%Y:%H:%M:%S %z

* `nginx`

Reads Nginx’s log file for the following fields: remote, user, time, method, path, code, size, referer and agent. This template is analogous to the following configuration:

    :::text
    format /^(?<remote>[^ ]*) (?<host>[^ ]*) (?<user>[^ ]*) \[(?<time>[^\]]*)\] "(?<method>\S+)(?: +(?<path>[^\"]*) +\S*)?" (?<code>[^ ]*) (?<size>[^ ]*)(?: "(?<referer>[^\"]*)" "(?<agent>[^\"]*)")?$/
    time_format %d/%b/%Y:%H:%M:%S %z

* `syslog`

Reads syslog’s output file (e.g. /var/log/syslog) for the following fields: time, host, ident, and message. This template is analogous to the following configuration:

    :::text
    format /^(?<time>[^ ]* [^ ]* [^ ]*) (?<host>[^ ]*) (?<ident>[a-zA-Z0-9_\/\.\-]*)(?:\[(?<pid>[0-9]+)\])?[^\:]*\: *(?<message>.*)$/
    time_format %b %d %H:%M:%S

* `tsv` or `csv`

If you use tsv or csv format, please also specify the `keys` parameter.

    :::text
    format tsv
    keys key1, key2, key3
    time_key key2

If you specify the `time_key` parameter, it will be used to identify the timestamp of the record. The timestamp when Fluentd reads the record is used by default.

    :::text
    format csv
    keys key1, key2, key3
    time_key key3

* `ltsv`

ltsv (Labeled Tab-Separated Value) is a tab-delimited key-value pair format. You can learn more about it on [its webpage](http://ltsv.org).

    :::text
    format ltsv
    delimiter =               # Optional. ':' is used by default
    time_key time_field_name

If you specify the `time_key` parameter, it will be used to identify the timestamp of the record. The timestamp when Fluentd reads the record is used by default.

* `json`

One JSON map, per line. This is the most straight forward format :).

    :::text
    format json

The `time_key` parameter can also be specified.

    :::text
    format json
    time_key key3

* `none`

You can use the `none` format to defer parsing/structuring the data. This will parse the line as-is with the key name "message". For example, if you had a line

    :::text
    hello world. I am a line of log!

It will be parsed as

    :::text
    {"message":"hello world. I am a line of log!"}

The key field is "message" by default, but you can specify a different value using the `message_key` parameter as shown below:

    :::text
    format none
    message_key my_message

* `multiline`

Read multiline log with `formatN` and `format_firstline` parameters. 
`format_firstline` is for detecting start line of multiline log.
`formatN`, N's range is 1..20, is the list of Regexp format for multiline log.
Here is Rails log example:

    :::text
    format multiline
    format_firstline /^Started/
    format1 /Started (?<method>[^ ]+) "(?<path>[^"]+)" for (?<host>[^ ]+) at (?<time>[^ ]+ [^ ]+ [^ ]+)\n/
    format2 /Processing by (?<controller>[^\u0023]+)\u0023(?<controller_method>[^ ]+) as (?<format>[^ ]+?)\n/
    format3 /(  Parameters: (?<parameters>[^ ]+)\n)?/
    format4 /  Rendered (?<template>[^ ]+) within (?<layout>.+) \([\d\.]+ms\)\n/
    format5 /Completed (?<code>[^ ]+) [^ ]+ in (?<runtime>[\d\.]+)ms \(Views: (?<view_runtime>[\d\.]+)ms \| ActiveRecord: (?<ar_runtime>[\d\.]+)ms\)/

If you have a multiline log

    :::text
    Started GET "/users/123/" for 127.0.0.1 at 2013-06-14 12:00:11 +0900
    Processing by UsersController#show as HTML
      Parameters: {"user_id"=>"123"}
      Rendered users/show.html.erb within layouts/application (0.3ms)
    Completed 200 OK in 4ms (Views: 3.2ms | ActiveRecord: 0.0ms)

It will be parsed as

    :::text
    {"method":"GET","path":"/users/123/","host":"127.0.0.1","controller":"UsersController","controller_method":"show","format":"HTML","parameters":"{ \"user_id\" = >\"123\"}", ...}


INCLUDE: _in_types


### pos_file (highly recommended)
This parameter is highly recommended. Fluentd will record the position it last read into this file.

    :::text
    pos_file /var/log/td-agent/tmp/access.log.pos

#### time_format
The format of the time field. This parameter is required only if the format includes a ‘time’ capture and it cannot be parsed automatically. Please see [Time#strftime](http://www.ruby-doc.org/core-1.9.3/Time.html#method-i-strftime) for additional information.

#### rotate_wait
in_tail actually does a bit more than `tail -F` itself. When rotating a file, some data may still need to be written to the old file as opposed to the new one.

in_tail takes care of this by keeping a reference to the old file (even after it has been rotated) for some time before transitioning completely to the new file. This helps prevent data designated for the old file from getting lost. By default, this time interval is 5 seconds.

The rotate_wait parameter accepts a single integer representing the number of seconds you want this time interval to be.

INCLUDE: _log_level_params

