# Configuration File

This article describes the basic concepts of Fluentd's configuration file.

## Overview

The configuration file allows the user to control the input and output behavior of Fluentd by (1) selecting input and output plugins and (2) specifying the plugin parameters. The file is required for Fluentd to operate properly.

## Config File Location

#### RPM or Deb

If you installed Fluentd using the rpm or deb packages, the config file is located at /etc/td-agent/td-agent.conf. `sudo /etc/init.d/td-agent reload` will reload the config file.

    :::term
    $ sudo vi /etc/td-agent/td-agent.conf

#### Gem

If you installed Fluentd using the Ruby Gem, you can create the configuration file using the following commands. Sending a SIGHUP signal will reload the config file.

    :::term
    $ sudo fluentd --setup /etc/fluent
    $ sudo vi /etc/fluent/fluent.conf

## List of Directives

The configuration file consists of the following directives:

1. **source** directives determine the input sources.
2. **match** directives determine the output destinations.
3. **include** directives include other files.

Let's actually create a configuration file step by step.

##(1) "source": where all the data come from

Fluentd's input sources are enabled by selecting and configuring the desired input plugins using **source** directives. Fluentd's standard input plugins include ``http`` and ``forward``. `http` turns fluentd into an HTTP endpoint to accept incoming HTTP messages whereas `forward` turns fluentd into a TCP endpoint to accept TCP packets. Of course, it can be both at the same time (You can add as many sources as you wish)

    # Receive events from 24224/tcp
    # This is used by log forwarding and the fluent-cat command
    <source>
      type forward
      port 24224
    </source>
    
    # http://this.host:9880/myapp.access?json={"event":"data"}
    <source>
      type http
      port 9880
    </source>

Each **source** directive must include a ``type`` parameter. The ``type`` parameter specifies which input plugin to use.

####Interlude: Routing

The `source` submits events into the Fluentd's routing engine. An event consists of three entities: **tag**, **time** and **record**. The tag is a string separated by '.'s (e.g. myapp.access), and is used as the directions for Fluentd's internal routing engine. The time field is specified by input plugins, and it must be in the Unix time format. The record is a JSON object. 

In the example above, the HTTP input plugin submits the following event::

    # generated by http://this.host:9880/myapp.access?json={"event":"data"}
    tag: myapp.access
    time: (current time)
    record: {"event":"data"}

####Didn't find your input source? You can write your own plugin!

You can add new input sources by writing your own plugins. For further information regarding Fluentd's input sources, please refer to the [Input Plugin Overview](input-plugin-overview) article.

##(2) "match": Tell fluentd what to do!

The "match" directive looks for events with _match_ing tags and processes them. The most common use of the match directive is to output events to other systems (for this reason, the plugins that correspond to the match directive are called "output plugins"). Fluentd's standard output plugins include ``file`` and ``forward``.  Let's add those to our configuration file.

    # Receive events from 24224/tcp
    # This is used by log forwarding and the fluent-cat command
    <source>
      type forward
      port 24224
    </source>
    
    # http://this.host:9880/myapp.access?json={"event":"data"}
    <source>
      type http
      port 9880
    </source>

    # Match events tagged with "myapp.access" and
    # store them to /var/log/fluent/access.%Y-%m-%d
    # Of course, you can control how you partition your data
    # with the time_slice_format option.
    <match myapp.access>
      type file
      path /var/log/fluent/access
    </match>
    
Each **match** directive must include a match pattern and a ``type`` parameter. Only events with a **tag** matching the pattern will be sent to the output destination (in the above example, only the events with the tag "myapp.access" is matched). The ``type`` parameter specifies the output plugin to use.

Just like input sources, you can add new output destinations by writing your own plugins. For further information regarding Fluentd's output destinations, please refer to the [Output Plugin Overview](output-plugin-overview) article.

###Match Pattern: how you control the event flow inside fluentd

The following match patterns can be used for the `<match>` tag.

* ``*`` matches a single tag part.

  * For example, the pattern ``a.*`` matches ``a.b``, but does not match ``a`` or ``a.b.c``

* ``**`` matches zero or more tag parts.

  * For example, the pattern ``a.**`` matches ``a``, ``a.b`` and ``a.b.c``

* ``{X,Y,Z}`` matches X, Y, or Z, where X, Y, and Z are match patterns.

  * For example, the pattern ``{a,b}`` matches ``a`` and ``b``, but does not match ``c``

  * This can be used in combination with the ``*`` or ``**`` patterns. Examples include ``a.{b,c}.*`` and ``a.{b,c.**}``


## (3) Re-use your config: the "include" directive

Directives in separate configuration files can be imported using the **include** directive::

    # Include config files in the ./config.d directory
    include config.d/*.conf

The **include** directive supports regular file path, glob pattern, and http URL conventions::

    # absolute path
    include /path/to/config.conf

    # if using a relative path, the directive will use 
    # the dirname of this config file to expand the path
    include extra.conf

    # glob match pattern
    include config.d/*.conf

    # http
    include http://example.com/fluent.conf
