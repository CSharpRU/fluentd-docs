# Configuration File

This article describes the basic concepts of Fluentd's configuration file.

## Overview

The configuration file allows the user to control the input and output behavior of Fluentd by (1) selecting input and output plugins and (2) specifying the plugin parameters. The file is required for Fluentd to operate properly.

## Config File Location

#### RPM or Deb

If you installed Fluentd using the rpm or deb packages, the config file is located at /etc/td-agent/td-agent.conf. `sudo /etc/init.d/td-agent reload` will reload the config file.

    :::term
    $ sudo vi /etc/td-agent/td-agent.conf

#### Gem

If you installed Fluentd using the Ruby Gem, you can create the configuration file using the following commands. Sending a SIGHUP signal will reload the config file.

    :::term
    $ sudo fluentd --setup /etc/fluent
    $ sudo vi /etc/fluent/fluent.conf

## List of Directives

The configuration file consists of the following directives:

1. **source** directives determine the input sources.
2. **match** directives determine the output destinations.
3. **include** directives include other files.

## (1) Source Directive

Fluentd's input sources are enabled by selecting and configuring the desired input plugins using **source** directives. Fluentd's standard input plugins include ``http`` and ``forward``. 

#### Examples

    # Receive events from 24224/tcp
    # This is used by log forwarding and the fluent-cat command
    <source>
      type forward
      port 24224
    </source>
    
    # http://this.host:9880/myapp.access?json={"event":"data"}
    <source>
      type http
      port 9880
    </source>

Each **source** directive must include a ``type`` parameter. The ``type`` parameter specifies the input plugin to use.

#### Routing

The 'source' submits events into the Fluentd's routing engine. An event consists of three entities: **tag**, **time** and **record**. The tag is a string separated by '.'s (e.g. myapp.access), and is used as the directions for Fluentd's internal routing engine. The time is the UNIX time when the event occurs. The record is a JSON object. 

In the example above, the HTTP input plugin submits the following event::

    # generated by http://this.host:9880/myapp.access?json={"event":"data"}
    tag: myapp.access
    time: (current time)
    record: {"event":"data"}

#### Plugin

Users can expand Fluentd's input sources beyond the default options by writing their own plugins. For further information regarding Fluentd's input sources, please refer to the [Input Plugin Overview](input-plugin-overview) article.


## (2) Match Directive

Fluentd's output destinations are enabled by selecting and configuring the desired output plugins using **match** directives. Fluentd's standard output plugins include ``file`` and ``forward``. 

#### Examples

    # Match events tagged with "myapp.access" and
    # store them to /var/log/fluent/access.%Y-%m-%d
    <match myapp.access>
      type file
      path /var/log/fluent/access
    </match>
    
    <match myapp.log.**>
      type file
      format /var/log/fluent/myapp_hourly
      time_slice_format %Y%m%d%H
    </match>

Each **match** directive must include a match pattern and a ``type`` parameter. Match patterns are used to filter the events. Only events with **tag** matching the pattern will be sent to the output destination. The ``type`` parameter specifies the output plugin to use.

For example, the user can send all matches to the pattern ``myapp.accesslog.**`` to ``file`` in a specified directory.

Users can expand Fluentd's output sources beyond the default options by writing their own plugins. For further information regarding Fluentd's output destinations, please refer to the [Output Plugin Overview](output-plugin-overview) article.

### Match Pattern

The following match patterns can be used:

* ``*`` matches a single tag element.

  * For example, the pattern ``a.*`` matches ``a.b``, but does not match ``a`` or ``a.b.c``

* ``**`` matches zero or more tag elements.

  * For example, the pattern ``a.**`` matches ``a``, ``a.b`` and ``a.b.c``

* ``{X,Y,Z}`` matches X, Y, or Z, where X, Y, and Z are match patterns.

  * For example, the pattern ``{a,b}`` matches ``a`` and ``b``, but does not match ``c``

  * This can be used in combination with the ``*`` or ``**`` patterns. Examples include ``a.{b,c}.*`` and ``a.{b,c.**}``


## (3) Include Directive

Directives in separate configuration files can be imported using the **include** directive::

    # Include config files in the ./config.d directory
    include config.d/*.conf

The **include** directive supports regular file path, glob pattern, and http URL conventions::

    # absolute path
    include /path/to/config.conf

    # if using a relative path, the directive will use 
    # the dirname of this config file to expand the path
    include extra.conf

    # glob match pattern
    include config.d/*.conf

    # http
    include http://example.com/fluent.conf
