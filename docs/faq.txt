# FAQ

## Fluentd is written in Ruby. Is it slow?

The most performance sensitive parts of Fluentd are written in C. The Ruby code acts as a wrapper that provides flexibility to the overall solution. In particular, the networking layer and object serialization layer are written in C (See [cool.io](https://github.com/tarcieri/cool.io) and [MessagePack](http://msgpack.org/)).

Since Fluentd is not written entirely in C or C++, it may be slow in its Ruby parts. But by giving up a little bit of speed, we have gained [many plugins](http://fluentd.org/plugin/) from the Ruby community :). Fluentd's performance has been put to the test at [many large services](users); in fact, a regular PC box can handle 18,000 messages/second with a single proceses.

If this number is insufficient for your application, please consider other solutions which are written entirely in C-family or Java. However, please note that you will lose some flexibility as a tradeoff.

## What is the difference with td-agent and Fluentd?

td-agent is the stable distribution package of Fluentd. The differences are as follows:

* td-agent is distributed as a [deb](install-by-deb) or [rpm](install-by-rpm) package, while Fluentd is distributed as a [Ruby gem](install-by-gem).
* td-agent includes the Ruby interpreter itself, while Fluentd not.
* td-agent includes the /etc/init.d/ script, while Fluentd not.
* td-agent includes the latest stable version of Fluentd and some compatible plugins.
* td-agent includes [jemalloc](http://www.canonware.com/jemalloc/) to prevent memory fragmentation on heavily loaded sites.

## Should I use td-agent or the Fluentd gem?

td-agent stresses stability over new features. If you wish to control Fluentd features and updates on your own, using the Fluentd gem is recommended. If you are using Fluentd for the first time or are using it in a large scale environment, using td-agent is recommended. A new version of td-agent is released every 2 or 3 months.

## Does Fluentd run on Windows?

Unfortunately, no. Fluentd depends on a Ruby gem called cool.io, which doesn't work on Windows. We're aiming to resolve this issue for the next Fluentd version.

## What is Fluentd's 'tag'?

Each Fluentd event log consists of the three components:

* tag
* time
* message

A tag must be specified for every log sent to Fluentd. The tag is used to route the message within Fluentd. The 'match' section in the configuration file specifies the tags that are routed to each destination.

Let's take a look at the example below. This configuration tails /var/log/combine.log and generates Fluentd logs with tag 'test-tag.'

    :::term
    <source>
      type tail
      format /^(?<wholemsg>.*)$/
      path /var/log/combined.log 
      tag test-tag
    </source> 

If you add the following lines to the configuration file, the logs are routed to stdout.

    :::term
    <match test-tag> 
      type stdout
    </match>

On the other hand, adding the following lines to the configuration file will not route the logs anywhere, since the match section doesn't match the tag.

    :::term
    <match some-other-tag>
      type stdout
    </match>

In essence, you can control your data process flow by using tags.

NOTE: The match section specifies the regexp used to look for matching tags. If a matching tag is found in a log, then the config inside the 'match' section is used (i.e. the log is routed according to the config inside).

## How can I estimate Fluentd's resource usage?

Fluentd consumes more resources as more logs are thrown at it. We have found that the CPU becomes a major bottleneck for heavily loaded Fluentd systems. To combat this bottleneck, Fluentd can leverage multiple CPU cores through its multi-process mode. A regular PC box is able to handle around 18,000 msgs/second.

## How is Fluentd's performance?

The most performance sensitive parts of Fluentd are carefully written in C, with Ruby code acting as a flexible wrapper. In addition, Fluentd can leverage multiple CPU cores through its multi-process mode.

In our benchmark experiments, a regular PC box was able to deliver 18,000 messages/second. If you need to handle a higher load, please consider using multiple Fluentd servers. If your application needs 100x this performance, please consider using other solutions or creating a custom solution.

## What is the difference between Fluentd and Splunk?

Splunk is a log collection + search engine for unstrucuted, text-based logs. It has a nice UI and indexing engine for searching for terms within text log files.

Fluentd is a log collector daemon for semi-structured JSON-based logs. It deals with machine-readable logs, whereas Splunk handles text-based logs. Also, Fluentd is simply a mechanism for receiving, buffering, and forwarding the data to another place. It does not have search engine functionality.

## I have a weird timestamp value, what happened?

The timestamps of Fluentd and its logger libraries depend on your system's clock. It's highly recommended that you set up NTP on your nodes so that your clocks remain synced with the correct clocks.

## How do we develop a custom plugin?

Please refer to the [Plugin Development Guide](http://docs.fluentd.org/articles/plugin-development).
