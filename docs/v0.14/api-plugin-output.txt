## Writing Buffered Output Plugins

NOTE: This page is simply copied from LINK(v0.12):[v0.12 documents](/articles/plugin-development), and will be updated later.

Extend the **Fluent::Plugin::Output** class and implement the following methods. See LINK:[Plugin Base Class API](/articles/api-plugin-base) to show details of common API for all plugin types.

TODO: fill this synopsis

    :::ruby
    require 'fluent/plugin/output'

    module Fluent::Plugin
      class SomeOutput < Output
        Fluent::Plugin.register_output('some', self)
  
        config_param :path, :string
  
        def process(tag, es)
        end

        def write(chunk)
        end

        def try_write(chunk)
        end

        def format(tag, time, record)
        end
      end
    end

## Modes of Output Plugins

TODO: write

http://www.slideshare.net/tagomoris/fluentd-v014-plugin-api-details/25

### How To Control Buffering

TODO: write

### How To Use Delayed Commit

TODO: write

### Understanding Chunk Metadata

TODO: write

### Formatting Buffer Chunks

TODO: write

### Changing Parameter Defaults of Buffer Plugins

TODO: write

## Methods

TODO: write

#### #process(tag, es)

TODO: write

#### #write(chunk)

TODO: write

        # This method is called every flush interval. Write the buffer chunk
        # to files or databases here.
        # 'chunk' is a buffer chunk that includes multiple formatted
        # events. You can use 'data = chunk.read' to get all events and
        # 'chunk.open {|io| ... }' to get IO objects.
        #
        # NOTE! This method is called by internal thread, not Fluentd's main thread. So IO wait doesn't affect other plugins.

        # You can use 'chunk.key' to get sliced time. The format of 'chunk.key'
        # can be configured by the 'time_format' option. The default format is %Y%m%d.
        def write(chunk)
          day = chunk.key
          ...
        end

#### #try_write(chunk)

TODO: write

#### #format(tag, time, record)

TODO: write

        # This method is called when an event reaches to Fluentd.
        # Convert the event to a raw string.
        def format(tag, time, record)
          [tag, time, record].to_json + "\n"
          ## Alternatively, use msgpack to serialize the object.
          # [tag, time, record].to_msgpack
        end

#### #prefer_buffered_processing

TODO: write

#### #prefer_delayed_commit

TODO: write

#### #extract_placeholders(str, metadata)

TODO: write

#### #commit_write(chunk_id, delayed: boolean)

TODO: write

#### #rollback_write(chunk_id)

TODO: write

## Writing Tests

TODO: write
