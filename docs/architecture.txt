# Overview

**Fluentd** is an Open-Source log collector daemon that treats logs as a JSON stream. The current largest user collects logs from 500+ servers, 5 TB daily, with 50,000 msgs/sec at peak time.

Fluentd is written in C with thin-Ruby wrapper.

## Purpose

Modern web and mobile applications generate a very large number of **event logs** (ex: login, logout, purchase, follow, etc.). These services can be improved greatly by analyzing their event logs. However, collecting these logs in a simple, reliable, and scalable manner remains a challenge. 

Fluentd solves this problem by providing a **simple solution** with the following features that just work:

* Easy Installation
* Small Footprint
* Semi-Structured Data Logging
* Flexible Plugin Mechanism
* Reliable Buffering
* Log Forwarding

## Easy Installation

**Fluentd** is available as a [rpm](install-by-rpm) or [deb](install-by-deb) package, with a built-in Ruby interpreter. There are virtually no system dependencies when installing via these packages.

Fluentd is also avaialble as a [Ruby gem](install-by-gem), and can be installed with a single command.

## Small Footprint

Due to its simple architecture, Fluentd’s core consists of just 3,000 lines of Ruby. Fluentd collects events from various **input** sources and writes them to **output** sinks.

* Input Examples: HTTP, Syslog, Apache Log
* Output Examples: Files, Mail, RDBMS databases, NoSQL storages

The figure below shows the basic idea of **input** and **output**::

    :::text
        Input                          Output
    +--------------------------------------------+
    |                                            |
    |  Web Apps  ---+                 +--> File  |
    |               |                 |          |
    |               +-->           ---+          |
    |  /var/log  ------>  Fluentd  ------> Mail  |
    |               +-->           ---+          |
    |               |                 |          |
    |  Apache    ---+                 +--> S3    |
    |                                            |
    +--------------------------------------------+

## Semi-Structured Data Logging

A collected event log consists of three components: *tag*, *time* and *record*. The tag is a string separated by '.' (e.g. myapp.access), and is used to categorize events. The time is the UNIX time when the event occurs. The record is a JSON object containing the event information.

## Flexible Plugin Mechanism

Fluentd’s input sources and output destinations can be extended by writing appropriate Ruby plugins. Plugins can then be published via Ruby gems; the following command shows the list of available plugins::

    :::term
    $ gem search -rd fluent-plugin

## Reliable Buffering

In traditional systems, event logs can be lost when an unexpected output write failure (ex: network failure) occurs. Fluentd has been designed to combat this issue, and is equipped with a reliable buffering strategy. Fluentd’s buffer, a queue of chunks containing the event logs, temporarily stores the collected events::

    Queue
    +---------+
    |         |
    |  Chunk <-- Write events to the top chunk
    |         |  (never block)
    |  Chunk  |
    |         |
    |  Chunk  |
    |         |
    |  Chunk --> Write out the bottom chunk
    |         |  (transactional)
    +---------+

When Fluentd receives an event from its input source, the event log is appended to the top chunk in the buffer. This temporary storage operation is never blocked, even if the next server is down.

A new empty chunk is pushed onto the top of the queue when either (1) the size of the top chunk reaches its limit, or (2) the timer expires. 

A separate thread writes the bottom chunk out to either the next server or the storage server. If this write operation is successful, the chunk is removed from the queue. Otherwise, the thread leaves the chunk in the queue and will try again later.

Fluentd’s buffer implementation is pluggable. The default plugin, 'Memory', stores the chunks in memory. It is fast but not persistent. Another plugin, 'File', stores the chunks in file.

## Log Forwarding

Fluentd supports both single-node and multi-node configurations. A multi-node configuration is typically used to forward event logs to one central location for analysis. Fluentd nodes on application servers forward the local logs to the Fluentd node of the central server::

    Web Server
    +---------+
    | Fluentd -------+
    +---------+      |
                     |
    Proxy Server     |
    +---------+      +--> +---------+
    | Fluentd ----------> | Fluentd |
    +---------+      +--> +---------+
                     |
    Database Server  |
    +---------+      |
    | Fluentd -------+
    +---------+
