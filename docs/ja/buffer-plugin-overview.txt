# Bufferプラグインの概要

FluentdのプラグインにはInput, Output, およびBufferという3つのタイプがあります。この記事ではBufferプラグインの概要を説明します。

We will first explain how Buffer Plugin works in general. Then, we will explain the mechanism of Time Sliced Plugin, a subclass of Buffer Plugin used by several core plugins. 

## Bufferプラグインの概要

Bufferプラグインは `out_file` や `out_forward` などのバッファリングするOutputプラグインによって使用され、ユーザーはニーズに合わせて最高の性能と信頼性を持つBufferプラグインを選択することができます。

## Bufferの構造

Bufferの構造は、次のようなチャンクのキューです。

    :::text
    queue
    +---------+
    |         |
    |  chunk <-- write events to the top chunk
    |         |
    |  chunk  |
    |         |
    |  chunk  |
    |         |
    |  chunk --> write out the bottom chunk
    |         |
    +---------+

"上"のチャンクがサイズまたは時間の限度(それぞれ `buffer_chunk_limit` と `flush_interval` で指定)に達すると、新しい空のチャンクがキューの"一番上"にpushされます。"一番下"のチャンクは新しいチャンクが上にpushされた際に瞬時に書き出されます。

もしチャンクの書き出しに失敗した場合、チャンクはキューに残され、Fluentdは数秒後(`retry_wait`)に書き出しを再試行します。再試行回数が限度(`retry_limit`)を超えた場合、チャンクは破棄されます。再試行待ちの時間は前回の2倍(1.0sec, 2.0sec, 4.0sec, ...)になります。もしキューの長さが制限(`buffer_queue_limit`)を超えた場合、新しいイベントの受け付けは拒否されます。

すべてのバッファリングするOutputプラグインは次のパラメータをサポートします。

    :::text
    <match pattern>
      buffer_type memory
      buffer_chunk_limit 256m
      buffer_queue_limit 128
      flush_interval 60s
      retry_limit 17
      retry_wait 1s
    </match>

`buffer_type` はBufferプラグインのタイプを指定します。デフォルトでは `memory` Bufferプラグインが使われます。Bufferタイプとして `file` を `buffer_path` パラメータと共に指定することもできます。

    :::text
    <match pattern>
      buffer_type file
      buffer_path /var/fluentd/buffer/ #make sure fluentd has write access to the directory!
      ...
    </match>

`flush_interval` と `retry_wait` では接尾辞として “s” (seconds), “m” (minutes), “h” (hours) を使用できます。 `retry_wait` にはdecimalを指定することができます。

`buffer_chunk_limit` では接尾辞として “k” (KB), “m” (MB), and “g” (GB) を使用できます。

## Time Sliced Plugin Overview

Time Sliced Plugin is a type of Buffer Plugin, so, it has the same basic buffer structure as Buffer Plugin.

In addition, each chunk is keyed by time and flushed when that chunk's timestamp has passed. This is different from This immediately raises a couple of questions.

1. How do we specify the granularity of time chunks? This is done through the `time_slice_format` option, which is set to "%Y%m%d" (daily) by default. If you want your chunks to be hourly, "%Y%m%d%H" will do the job.
2. What if new logs come after the time corresponding the current chunk? For example, what happens to an event, timestamped at 2013-01-01 02:59:45 UTC, comes in at 2013-01-01 03:00:15 UTC? Would it make into the 2013-01-01 02:00:00-02:59:59 chunk?
  
  This issue is addressed by setting the `time_slice_wait` parameter. `time_slice_wait` sets, in seconds, how long fluentd waits to accept "late" events into the chunk *past the max time corresponding to that chunk*. The default value is 600, which means it waits for 10 minutes before moving on. So, in the current example, as long as the events come in before 2013-01-01 03:10:00, it will make it in to the 2013-01-01 02:00:00-02:59:59 chunk.

  Alternatively, you can also flush the chunks regularly using `flush_interval`. Note that `flush_interval` and `time_slice_wait` are mutually exclusive. If you set `flush_interval`, `time_slice_wait` will be ignored and fluentd would issue a warning.

<img style="display:block;" src="http://image.slidesharecdn.com/fluentdmeetup-diveintofluentplugin-120203210125-phpapp02/95/slide-60-728.jpg"/>

##Notes

If you are curious which core output plugin use Buffered and which are Time Sliced, please see [the list here](http://docs.fluentd.org/articles/output-plugin-overview#overview)

## Bufferの一覧

* [buf_memory](buf_memory)
* [buf_file](buf_file)
