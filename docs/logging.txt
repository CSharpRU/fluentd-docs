# Logging of Fluentd

This article describes Fluentd logging mechanizm. 

## Log level

Shown below is the list of supported values, in increasing order of verbosity:

* `fatal`
* `error`
* `warn`
* `info`
* `debug`
* `trace`

Default log level is `info`. So, Fluentd outputs `info`, `warn`, `error` and `fatal` logs by default.
And Fluentd has two log layer, global and per plugin. You can set different log level between global and plugins.

## Global log

Global log is used by Fluentd core and a plugin which doesn't set own log level.
Fluentd provides several options to change global log level.

### Increase verbose level

`-v` option is for setting `debug` level and `-vv` option is for setting `trace` level.

    :::term
    $ fluentd -v  ... # debug level
    $ fluentd -vv ... # trace level

These options are useful for debugging.

### Decrease verbose level

`-q` option is for setting `warn` level and `-qq` option is for setting `error` level.

    :::term
    $ fluentd -q  ... # warn level
    $ fluentd -qq ... # error level

## Per plugin log (Fluentd v0.10.43 and above)

You can set `log_level` parameter in each plugin configuration. The `log_level` option allows the user to set different levels of logging for each plugin. 

For example, in order to debug [in_tail](in_tail) but suppress all but fatal log messages for [in_http](in_http), their respective `log_level` options should be set as follows:

    <source>
        type tail
        log_level debug
        path /var/log/data.log
        ...
    </source>
    <source>
        type http
        log_level fatal
    </source>

If you don't set `log_level` parameter, a plugin uses global log.

NOTE: Although this option is supported for all plugins, certain plugins haven't supported yet. <a href="plugin-development#logging">Logging section of Plugin Development article</a> explains how to update such plugins to the new log level system.

## Output to log file

Fluentd outputs logs to `STDOUT` by default. If you want to use a file instead, then please specify `-o` option.

    :::term
    $ fluentd -o /path/to/log_file

NOTE: Fluentd doesn't support log rotation yet.

## Capture Fluentd logs

You can process Fluentd logs using `<match fluent.**>`. If you define `<match fluent.**>` in your configuration, 
then Fluend sends own logs to this match. This is useful for monitoring Fluentd logs.

For example, if you have following `<match fluent.**>`:

    # omit other source / match
    <match fluent.**>
      type stdout
    </match>

then Fluentd outputs `fluent.info` log to stdout like below:

    2014-02-27 00:00:00 +0900 [info]: shutting down fluentd
    2014-02-27 00:00:01 +0900 fluent.info: { "message":"shutting down fluentd"} # by <match fluent.**>
    2014-02-27 00:00:01 +0900 [info]: process finished code = 0

At production, you can use [out_forward](out_forward) to send Fluentd logs to monitoring server.
A monitoring server filters the logs and sends filtered logs to your notification system, e.g. chat, irc, etc.

Leaf server example:

    # Add hostname for identifing the server and tag to filter by log level
    <match fluent.**>
      type record_modifier
      tag internal.message
      host ${hostname}
      include_tag_key
      tag_key original_tag
    </match>

    <match internal.message>
      type forward
      <server>
        # Monitoring server parameters
      </server>
    </match>

Monitoring server example:

    # Ignore trace, debug and info log
    <match internal.message>
      type grep
      regexp1 original_tag fluent.(warn|error|fatal)
      add_prefix filtered
    </match>

    <match filtered.internal.message>
      # your notification setup. This example uses irc plugin
      type irc
      host irc.domain
      channel notify
      message notice: %s [%s] @%s %s
      out_keys original_tag,time,host,message
    </match>

If an error occurred, you got a notification message in your irc `notify` channel.

    01:01  fluentd: [11:10:24] notice: fluent.warn [2014/02/27 01:00:00] @leaf.server.domain forward error: detached forwarding server 'server.name'

