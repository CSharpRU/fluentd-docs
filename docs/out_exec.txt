# exec Output Plugin

The `out_exec` Buffered Output plugin passes events to an external program as a tab-separated value (TSV) file. The program receives the path of a TSV file containing incoming events as its last argument.

## Example Configuration

`out_exec` is included in Fluentd's core. No additional installation process is required.

    :::text
    <match pattern>
      type exec
      command cmd arg arg
      keys k1,k2,k3
      tag_key k1
      time_key k2
      time_format %Y-%m-%d %H:%M:%S
    </match>

NOTE: Please see the <a href="config-file">Config File</a> article for the basic structure and syntax of the configuration file.

## Parameters

### type (required)
The value must be `exec`.

### command (required)
The command (program) to execute. The exec plugin passes the path of a TSV file as the last argument.

### keys (required)
Comma-separated keys to use in the TSV file.

### tag_key
The name of the key to use as the event tag. This replaces the value in the event record.

### time_key
The name of the key to use as the event time. This replaces the the value in the event record.

### time_format
The format for event time used when the `time_key` parameter is specified. The default is UNIX time (integer).

## Buffer Parameters
For advanced usage, you can tune Fluentd's internal buffering mechanism with these parameters.

### buffer_type
The buffer type is `file` by default ([buf_file](buf_file)). The `memory` ([buf_memory](buf_memory)) buffer type can be chosen as well. The `path` parameter is used as `buffer_path` in this plugin.

### buffer_queue_limit, buffer_chunk_limit
The length of the chunk queue and the size of each chunk, respectively. Please see the [Buffer Plugin Overview](buffer-plugin-overview) article for the basic buffer structure. The default values are 256 and 8m, respectively. The suffixes “k” (KB), “m” (MB), and “g” (GB) can be used for buffer_chunk_limit.

### flush_interval
The interval between data flushes. The default is 1s. The suffixes “s” (seconds), “m” (minutes), and “h” (hours) can be used.

### retry_wait and retry_limit
The interval between write retries, and the number of retries. The default values are 1.0 and 17, respectively. `retry_wait` doubles every retry (e.g. the last retry waits for 131072 sec, roughly 36 hours).
